/** @license React v16.9.0 */
typescript: 
(fiber as FiberNode).stateNode // 当前状态
(fiber as FiberNode).updateQueue // 队列 state queue

情况1，在一个方法体内执行3次setState, 状态如何合并，nextState，prevState呈现什么形态
state = { // 默认state
  name: 'CC'
}

onClick: (e) => {
  e.stopPropagation();
  debugger;
  self.setState({
    name: 'Son1',
    a: 1
  })
  self.setState({
    name: 'Son2',
    b: 2
  })
  self.setState({
    name: 'Son3',
    c: 3
  })
}

(fiber as FiberNode).stateNode = {
  "name": "CC"
}
(fiber as FiberNode).updateQueue = {
  "baseState": {
    "name": "CC"
  },
  "firstUpdate": {
    "expirationTime": 1073741823,
    "suspenseConfig": null,
    "tag": 0,
    "payload": {
      "name": "Son1",
      "a": 1
    },
    "callback": null,
    "next": {
      "expirationTime": 1073741823,
      "suspenseConfig": null,
      "tag": 0,
      "payload": {
        "name": "Son2",
        "b": 2
      },
      "callback": null,
      "next": {
        "expirationTime": 1073741823,
        "suspenseConfig": null,
        "tag": 0,
        "payload": {
          "name": "Son3",
          "c": 3
        },
        "callback": null,
        "next": null,
        "nextEffect": null,
        "priority": 98
      },
      "nextEffect": null,
      "priority": 98
    },
    "nextEffect": null,
    "priority": 98
  },
  "lastUpdate": {
    "expirationTime": 1073741823,
    "suspenseConfig": null,
    "tag": 0,
    "payload": {
      "name": "Son3",
      "c": 3
    },
    "callback": null,
    "next": null,
    "nextEffect": null,
    "priority": 98
  },
  "firstCapturedUpdate": null,
  "lastCapturedUpdate": null,
  "firstEffect": null,
  "lastEffect": null,
  "firstCapturedEffect": null,
  "lastCapturedEffect": null
}

onClick 会被包装一层变成 function noop {} // 为了实现proxy的功能，在方法执行前后干些什么

0.setState
// 阶段二 触发事件
1. invokeGuardedCallbackDev 里面有一个内部函数callCallback会被触发
      invokeGuardedCallbackImpl = invokeGuardedCallbackDev; // 别名
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // 别名2
2. invokeGuardedCallback
3. invokeGuardedCallbackAndCatchFirstError
4. executeDispatch
5. executeDispatchesInOrder
6. executeDispatchesAndRelease
7. executeDispatchesAndReleaseTopLevel
8. forEachAccumulated
9. runEventsInBatch
10. runExtractedPluginEventsInBatch
11. handleTopLevel
12. batchedEventUpdates
13. dispatchEventForPluginEventSystem
14. dispatchEvent







15. unstable_runWithPriority (priorityLevel, eventHandler)
    别名 Scheduler_runWithPriority
    return eventHandler();

16. runWithPriority$2(reactPriorityLevel, fn)


    处理二
      renderRoot 方法调用 commitRoot.bind(...)
      commitRoot 被执行触发 runWithPriority$2
      runWithPriority$2 传入了 fn = commitRootImpl.bind(null, root, renderPriorityLevel)
      runWithPriority$2 方法 return Scheduler_runWithPriority(priorityLevel, fn);
      Scheduler_runWithPriority 方法执行了 fn

      commitRootImpl被执行，会执行commitMutationEffects, commitLayoutEffects
        commitMutationEffects被执行，会执行commitPlacement
          commitPlacement 递归将所有的节点都加入到主节点
        commitLayoutEffects被执行，会执行commitLifeCycles
          commitLifeCycles 触发class组件都componentDidMount, componentDidUpdate

17. discreteUpdates$1 (fn, a, b, c) 
    return runWithPriority$2(UserBlockingPriority$2, fn.bind(null, a, b, c));
18. discreteUpdates 方法，此方法调用下面方法  // 2
      discreteUpdatesImpl(dispatchEvent, ...) 实际是调用 discreteUpdates$1

      ReactDOM在初始化时调用了下面方法
      setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1); // 0
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl,
        _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl; // 1
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
      }
    
19. dispatchDiscreteEvent (topLevelType, eventSystemFlags, nativeEvent) 
      调用discreteUpdates(dispatchEvent, ...)方法







// 阶段一 绑定事件 ，事件代理
情景一
  1.绑定 给 document 对象加入click的DOM2级事件，将dispatchEvent.bind绑定到事件中
  2.触发 dispatchEvent方法
    触发时，拿到e.target, 从e.target中将FiberNode取出来
    每个真实DOM都对应一个FiberNode
    从FiberNode中把onClick方法拿出来，
    继续向下执行，传递回调函数，利用js模拟事件，触发一个事件，执行onClick函数，此时这个模拟事件相当于一个proxy
  3.onClick执行完毕，虚拟DOM此时因为OnClick已经计算完毕
    回调函数回归，触发commitRoot.bind(FiberNodeRoot)，触发commitRootImpl.bind(FiberNodeRoot)
  4.执行虚拟DOM变更
（只有在React事件绑定中，setState才会状态合并，会进行回归）
  

20. trapEventForPluginEventSystem 重要
    element = docunent, rawEventName = 'click', listener = function
    addEventBubbleListener(element, rawEventName, listener);
    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function trapEventForPluginEventSystem(element, topLevelType, capture) {
      var listener = void 0;
      switch (getEventPriority(topLevelType)) {
        case DiscreteEvent:
          listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
          break;
        case UserBlockingEvent:
          listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
          break;
        case ContinuousEvent:
        default:
          listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM);
          break;
      }

      var rawEventName = getRawEventName(topLevelType);
      if (capture) {
        addEventCaptureListener(element, rawEventName, listener);
      } else {
        addEventBubbleListener(element, rawEventName, listener);
      }
    }


21. trapBubbledEvent
      初始化时调用了 trapEventForPluginEventSystem
21. listenTo
      调用了 trapBubbledEvent
22. ensureListeningTo

23. setInitialDOMProperties
      此方法对props进行了处理
      会对所有的定义的React事件进行处理
      registrationNameModules = [onClick, ...]
      else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (true && typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
      }
24. setInitialProperties
      初始化属性
      // 情景介绍一，假设你的标签不是一个input,textarea,option,select,会执行下面代码
      if (typeof props.onClick === 'function') {
        trapClickOnNonInteractiveElement(domElement);
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
25. finalizeInitialChildren
26. completeWork 
      初始化React虚拟DOM


// 第三阶段事件回收
commitRoot(root)
runRootCallback(root, callback, isSync)
flushSyncCallbackQueueImpl()
unstable_runWithPriority(priorityLevel, eventHandler) React里面的方法 重要
runWithPriority$2(reactPriorityLevel, fn)
flushSyncCallbackQueue()
discreteUpdates$1
discreteUpdates
dispatchDiscreteEvent
requestHostCallback React里面的方法
  requestAnimationFrame
performWorkUntilDeadline  React里面的方法
requestAnimationFrame React里面的方法
在此结束